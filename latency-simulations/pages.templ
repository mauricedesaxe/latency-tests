package latency_simulations

import (
	"fmt"
	"go-on-rails/common"
	"time"
)

templ home_page(logs []LatencyLog) {
	@common.Base("Latency Simulations") {
		<main class="container mx-auto px-4 py-4 space-y-6">
			<div class="lg:px-8 px-4 sm:px-6">
				<div class="sm:flex sm:items-center">
					<div class="sm:flex-auto">
						<h2 class="dark:text-gray-100 font-semibold text-base text-gray-900">Latency Logs</h2>
						<p class="dark:text-gray-300 mt-2 text-gray-700 text-sm">
							A list of all latency measurements including percentile breakdowns.
						</p>
					</div>
					<div class="mt-4 sm:flex-none sm:ml-16 sm:mt-0">
						<a href="/simulate" class="bg-indigo-600 focus-visible:outline focus-visible:outline-2 focus-visible:outline-indigo-600 focus-visible:outline-offset-2 font-semibold hover:bg-indigo-500 inline-flex items-center px-3 py-2 rounded-md shadow-sm text-sm text-white">
							Run Simulations
						</a>
					</div>
				</div>
				<div class="flow-root mt-8">
					<div class="-mx-4 -my-2 lg:-mx-8 overflow-x-auto sm:-mx-6">
						<div class="align-middle inline-block lg:px-8 min-w-full py-2 sm:px-6">
							<table class="dark:divide-gray-700 divide-gray-300 divide-y min-w-full">
								<thead>
									<tr>
										<th scope="col" class="dark:text-gray-100 font-semibold pl-4 pr-3 py-3.5 sm:pl-0 text-gray-900 text-left text-sm">
											<a href="?sort_by=label&sort_order=asc" class="hover:text-gray-500">Label ⬆</a>
											<a href="?sort_by=label&sort_order=desc" class="hover:text-gray-500">⬇</a>
										</th>
										<th scope="col" class="dark:text-gray-100 font-semibold px-3 py-3.5 text-gray-900 text-left text-sm">
											<a href="?sort_by=median&sort_order=asc" class="hover:text-gray-500">Median ⬆</a>
											<a href="?sort_by=median&sort_order=desc" class="hover:text-gray-500">⬇</a>
										</th>
										<th scope="col" class="dark:text-gray-100 font-semibold px-3 py-3.5 text-gray-900 text-left text-sm">
											<a href="?sort_by=p10&sort_order=asc" class="hover:text-gray-500">P10 ⬆</a>
											<a href="?sort_by=p10&sort_order=desc" class="hover:text-gray-500">⬇</a>
										</th>
										<th scope="col" class="dark:text-gray-100 font-semibold px-3 py-3.5 text-gray-900 text-left text-sm">
											<a href="?sort_by=p25&sort_order=asc" class="hover:text-gray-500">P25 ⬆</a>
											<a href="?sort_by=p25&sort_order=desc" class="hover:text-gray-500">⬇</a>
										</th>
										<th scope="col" class="dark:text-gray-100 font-semibold px-3 py-3.5 text-gray-900 text-left text-sm">
											<a href="?sort_by=p75&sort_order=asc" class="hover:text-gray-500">P75 ⬆</a>
											<a href="?sort_by=p75&sort_order=desc" class="hover:text-gray-500">⬇</a>
										</th>
										<th scope="col" class="dark:text-gray-100 font-semibold px-3 py-3.5 text-gray-900 text-left text-sm">
											<a href="?sort_by=p90&sort_order=asc" class="hover:text-gray-500">P90 ⬆</a>
											<a href="?sort_by=p90&sort_order=desc" class="hover:text-gray-500">⬇</a>
										</th>
										<th scope="col" class="dark:text-gray-100 font-semibold px-3 py-3.5 text-gray-900 text-left text-sm">
											<a href="?sort_by=p95&sort_order=asc" class="hover:text-gray-500">P95 ⬆</a>
											<a href="?sort_by=p95&sort_order=desc" class="hover:text-gray-500">⬇</a>
										</th>
										<th scope="col" class="dark:text-gray-100 font-semibold px-3 py-3.5 text-gray-900 text-left text-sm">
											<a href="?sort_by=count&sort_order=asc" class="hover:text-gray-500">Count ⬆</a>
											<a href="?sort_by=count&sort_order=desc" class="hover:text-gray-500">⬇</a>
										</th>
									</tr>
								</thead>
								<tbody class="dark:divide-gray-800 divide-gray-200 divide-y">
									for _, log := range logs {
										<tr>
											<td class="dark:text-gray-100 font-medium pl-4 pr-3 py-4 sm:pl-0 text-gray-900 text-sm whitespace-nowrap">
												{ log.Label }
											</td>
											<td class="dark:text-gray-400 px-3 py-4 text-gray-500 text-sm whitespace-nowrap">
												{ fmt.Sprintf("%.2f", log.MedianLatency/float64(time.Millisecond)) } ms
											</td>
											<td class="dark:text-gray-400 px-3 py-4 text-gray-500 text-sm whitespace-nowrap">
												{ fmt.Sprintf("%.2f", log.P10Latency/float64(time.Millisecond)) } ms
											</td>
											<td class="dark:text-gray-400 px-3 py-4 text-gray-500 text-sm whitespace-nowrap">
												{ fmt.Sprintf("%.2f", log.P25Latency/float64(time.Millisecond)) } ms
											</td>
											<td class="dark:text-gray-400 px-3 py-4 text-gray-500 text-sm whitespace-nowrap">
												{ fmt.Sprintf("%.2f", log.P75Latency/float64(time.Millisecond)) } ms
											</td>
											<td class="dark:text-gray-400 px-3 py-4 text-gray-500 text-sm whitespace-nowrap">
												{ fmt.Sprintf("%.2f", log.P90Latency/float64(time.Millisecond)) } ms
											</td>
											<td class="dark:text-gray-400 px-3 py-4 text-gray-500 text-sm whitespace-nowrap">
												{ fmt.Sprintf("%.2f", log.P95Latency/float64(time.Millisecond)) } ms
											</td>
											<td class="dark:text-gray-400 px-3 py-4 text-gray-500 text-sm whitespace-nowrap">
												{ fmt.Sprintf("%.2f", log.Count) }
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</main>
	}
}
